full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
View(cell_sf_tidy_DC)
nb <- poly2nb(cell_sf_tidy_DC)
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
nb
lw
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
source('E:/R-code/Modeling/code/spml_tutorial.R', echo=TRUE)
View(Produc)
View(cell_tidy_DC_pdfo)
cell_DC_FEDurbin = spml(plant ~ onset + lat, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
dim(lw)
lw
summary(cell_tidy_DC_pdfo)
nrow(cell_tidy_DC_pdfo)
nrow(Produc)
ncol(Produc)
usalw
lw
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
nb <- poly2nb(cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
lw
nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
class(cell_sf_tidy_DC_year)
?poly2nb
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
nb
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
lw
print.listw(lw, zero.policy = TRUE)
?poly2nb
card(nb)
sum(card(nb == 0))
as.numeric(nb)
nb
card(nb) == 0
sum(card(nb) == -)
sum(card(nb) == 0)
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0]
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nrow(cell_sf_tidy_DC_year)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
# add cell_ID
clean_cell_ID <- function(cell_ID) {
strsplit(cell_ID, "_")[[1]][2]
}
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
#tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# get only the regions with links, redo neighbors calc, filter the data for all years accordingly
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
linked_cells <- cell_sf_tidy_DC_year$cell_ID
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% linked_cells, ]
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
lw
nrow(cell_sf_tidy_DC)
223*11
usalw
816/48
lw
nb
usalw
lw
?spml
print(listw)
print(lw)
View(lw)
cell_DC_FEDurbin = spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, index = NULL,
listw = usalw, model = "random", lag = TRUE, spatial.error = "b")
cell_DC_FEDurbin = spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, index = NULL,
model = "random", lag = TRUE, spatial.error = "b")
summary(cell_DC_FEDurbin)
View(cell_tidy_DC_pdfo)
cell_DC_FEDurbin = spml(plant ~ onset + lat, data=cell_tidy_DC_pdfo, listw=lw, index = NULL,
model = "random", lag = TRUE, spatial.error = "b")
summary(cell_DC_FEDurbin)
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# get only the regions with links, redo neighbors calc, filter the data for all years accordingly
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
linked_cells <- cell_sf_tidy_DC_year$cell_ID
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% linked_cells, ]
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_model = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, index = NULL,
model = "random", lag = TRUE, spatial.error = "b")
summary(cell_DC_model)
cell_DC_model2 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_model2 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="within", lag=TRUE, spatial.error="none")
cell_DC_model1 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model = "random", lag = TRUE, spatial.error = "b")
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="within", lag=TRUE, spatial.error="kkp")
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="random", lag=TRUE, spatial.error="kkp")
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="individual", lag=TRUE, spatial.error="kkp")
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="pooling", lag=TRUE, spatial.error="kkp")
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="pooling", effect = "twoways", lag=TRUE, spatial.error="kkp")
cell_DC_model3
summary(cell_DC_model3)
cell_DC_model3$residuals
cell_DC_model4 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
lag = TRUE, spatial.error = "b", model = "within",
+ effect = "individual", method = "eigen")
cell_DC_model4 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
lag = TRUE, spatial.error = "b", model = "within", effect = "individual", method = "eigen")
View(Produc)
spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model = "within",
lag = TRUE, spatial.error = TRUE)
plot(cell_DC_model3$residuals)
plot(cell_DC_model3)
install.packages('alr')
plot(cell_DC_model3, which = c(1,2))
cell_DC_model3
cell_DC_model3$coefficients
plot(cell_DC_model3$fitted.values, cell_DC_model3$residuals, main = "fitted values vs residuals")
cell_DC_model3$fitted.values
range(cell_DC_model$fitted.values)
range(cell(cell_DC_model$residuals))
range(cell_DC_model$residuals))
range(cell_DC_model$residuals)
qqnorm(cell_DC_model3$residuals, pch = 1, frame = FALSE)
qqline(cell_DC_model3$residuals, col = "steelblue", lwd = 2)
test_plots <- function(model, model_name) {
# fitted values vs residuals
plot(cell_DC_model3$fitted.values, cell_DC_model3$residuals, main = paste("fitted values vs residuals", model_name))
# normal probability plot
qqnorm(cell_DC_model3$residuals, pch = 1, frame = FALSE, main = model_name)
qqline(cell_DC_model3$residuals, col = "steelblue", lwd = 2)
}
test_plots(cell_DC_model1, "model1")
cell_DC_model2 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T)
source('E:/R-code/Modeling/code/spml_tutorial.R', echo=TRUE)
warnings()
W
listw
usalw
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
lw
View(usalw)
df
View(cell_tidy_DC_pdfo)
cell_DC_model2 = spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T)
traceback()
?lag.listw
lw
View(lw)
View(listw)
sapply(lw$neighbours, length)
sapply(lw$weights, length)
sapply(lw$weights, length) - sapply(lw$neighbours, length)
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# get only the regions with links, redo neighbors calc, filter the data for all years accordingly
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
linked_cells <- cell_sf_tidy_DC_year$cell_ID
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% linked_cells, ]
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_model1 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model = "random", lag = TRUE, spatial.error = "b")
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# get only the regions with links, redo neighbors calc, filter the data for all years accordingly
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
linked_cells <- cell_sf_tidy_DC_year$cell_ID
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% linked_cells, ]
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_model1 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model = "random", lag = TRUE, spatial.error = "b")
# this doesn't work, object lengths differ
#cell_DC_model2 = spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T)
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="pooling", effect = "twoways", lag=TRUE, spatial.error="kkp")
summary(cell_DC_model3)
# test the models
test_plots <- function(model, model_name) {
plot(cell_DC_model$residuals, main = paste("residual vs index", model_name))
# fitted values vs residuals
plot(cell_DC_model3$fitted.values, cell_DC_model3$residuals, main = paste("fitted values vs residuals", model_name))
# normal probability plot
qqnorm(cell_DC_model3$residuals, pch = 1, frame = FALSE, main = model_name)
qqline(cell_DC_model3$residuals, col = "steelblue", lwd = 2)
}
test_plots(cell_DC_model1, "model1")
test_plots(cell_DC_model3, "model3")
spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T)
traceback()
?lag.listw
lag.listw(lw, c(1,2))
?spml
spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = F)
spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T, zero.policy = TRUE)
browser()
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="pooling", effect = "twoways", lag=TRUE, spatial.error="kkp")
browser()
cell_DC_model3 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model="pooling", effect = "twoways", lag=TRUE, spatial.error="kkp")
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# get only the regions with links, redo neighbors calc, filter the data for all years accordingly
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
linked_cells <- cell_sf_tidy_DC_year$cell_ID
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% linked_cells, ]
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_model1 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model = "random", lag = TRUE, spatial.error = "b")
# this doesn't work, object lengths differ
cell_DC_model2 = spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T)
library(splm)
library(plm)
# filter for only DC cells
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy_DC <- cell_sf_tidy %>%
filter(intensity == "DC")
# filter out all cells where there isn't data for all years
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year,]
cells_list[[i]] <- cells_in_year$cell_ID
i <- i + 1
}
full_data_cells <- Reduce(base::intersect, cells_list)
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% full_data_cells, ]
# spatial Durbin model with region and time (twoways) fixed effect
#spatial weights matrix, convert to weights list object
#W5EX.lw = mat2listw(W5EX, style="W")
#class(W5EX.lw) # listw, nb
cell_sf_tidy_DC_year <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == 2014,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
# get only the regions with links, redo neighbors calc, filter the data for all years accordingly
cell_sf_tidy_DC_year <- cell_sf_tidy_DC_year[card(nb) != 0,]
nb <- poly2nb(cell_sf_tidy_DC_year) # only for ONE year
lw <- nb2listw(nb, zero.policy = TRUE) # listw object
linked_cells <- cell_sf_tidy_DC_year$cell_ID
cell_sf_tidy_DC <- cell_sf_tidy_DC[cell_sf_tidy_DC$cell_ID %in% linked_cells, ]
# convert data.frame to pdata.frame object to apply as panel data (use package plm)
cell_tidy_DC_pdf <- pdata.frame(cell_sf_tidy_DC, c("cell_ID","year"))
# data must be stacked first by time period and then by region
# first index "year", second index "region" - i.e. have a column for region, then column for year
cell_tidy_DC_pdfo <- cell_tidy_DC_pdf[order(cell_tidy_DC_pdf$year) , ] # pdata.frame
# spml is the general wrapper function and the argument model controls the specification
# model = "within" for fixed effects; "random" for random effects, "pooling" for no effects
# spatial structure is specified by combining logical arguments lag (if TRUE, adds spatial autoregressive term in the dependent variable) and spatial.error (takes three values: "b", "kkp", or "none" for no spatial error correlation")
#cell_DC_FEDurbin = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw, model="within", effect="twoways", lag=TRUE, spatial.error="none")
cell_DC_model1 = spml(plant ~ onset + lat + year, data=cell_tidy_DC_pdfo, listw=lw,
model = "random", lag = TRUE, spatial.error = "b")
# this doesn't work, object lengths differ
browser()
cell_DC_model2 = spml(plant ~ onset, data=cell_tidy_DC_pdfo, listw=lw, effect = "individual", model="within", spatial.error="none", lag = T)
res_spatial$residuals
plot(res_spatial$fitted.values, res_spatial$residuals)
cell_DC_model1 = spml(plant ~ onset + lat + year  +1, data=cell_tidy_DC_pdfo, listw=lw,
model = "random", lag = TRUE, spatial.error = "b")
test_plots(cell_DC_model1, "model1")
source('E:/R-code/Modeling/code/spml_tutorial.R', echo=TRUE)
plot(res_spatial$fitted.values, res_spatial$residuals)
shiny::runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
to_download
df <- readRDS("./cell_spdf.rds")
df <- df[df$plant_stat_type == "median", ] # show median planting date only
to_download <- as.data.frame(df)
setwd("E:/R-code/Webpage/cropTiming2")
runApp()
df <- readRDS("./cell_spdf.rds")
df <- df[df$plant_stat_type == "median", ] # show median planting date only
to_download <- as.data.frame(df)
class(to_download)
write.csv(to_download)
runApp()
class(df)
?writeOGR
writeOGR(obj=df, dsn="cell_data", layer="cell_data", driver="ESRI Shapefile")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(to_download_csv)
df <- readRDS("./cell_spdf.rds")
df <- df[df$plant_stat_type == "median", ] # show median planting date only
to_download_csv <- as.data.frame(df)
head(to_download_csv)
names(to_download_csv)
to_download_csv <- as.data.frame(df) %>%
select(-c("SC_delay", "DC_area_km", "label", "Muni_code", "SC_area_km",
"onset_rang", "DC_delay", "plant_stat_type", "cell_ID", "region",
"year_index", "year_factor"))
library(dplyr)
to_download_csv <- as.data.frame(df) %>%
dplyr::select(-c("SC_delay", "DC_area_km", "label", "Muni_code", "SC_area_km",
"onset_rang", "DC_delay", "plant_stat_type", "cell_ID", "region",
"year_index", "year_factor"))
names(to_download_csv)
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp('E:/R-code/Webpage/cropTiming2')
rsconnect::setAccountInfo(name='minghui-zhang', token='93E93413B49827F1DF72EF1F7EC66089', secret='v4RtxHFX1OV57pIE6MmvTHxEh4Uif0mbGrxVhzLP')
runApp()
install.packages('lattice')
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
shiny::runApp()
runApp()
