best_new_predictor <- predictor
}
}
# return best predictor, its adjR2, and the list of other predictors' R2
all_adjR2 <- data.frame(model = c("initial", new.predictors), adjR2 = new_adjR2s)
return(list(new_predictor = best_new_predictor,
new_adjR2 = current_best_adjR2,
adjR2_table = all_adjR2))
}
# runs add_predictor_stepwise to build the final model
produce_model_stepwise <- function(data, initial.predictors, y.var, spatial.auto.model,
new.predictors, crop.intensity, mask.soy.area, max.predictors) {
# notes
# max.predictors = the max allowed number of predictors in the model
model_finalized <- FALSE
iterations <- 0
while (!model_finalized & iterations <= 10) {
iterations <- iterations + 1
# add a new predictor, save results
result <- add_predictor_stepwise(data, initial.predictors, y.var, spatial.auto.model,
new.predictors, crop.intensity, mask.soy.area)
new_predictor <- result$new_predictor
new_adjR2_table <- result$adjR2_table
new_adjR2 <- result$new_adjR2
print(new_adjR2_table)
# check if the model returned 'none' or the max.predictors was reached; if so, model is finalized
# if model is finalized, return the model
if (new_predictor == "none" | length(initial.predictors) >= max.predictors) {
model_finalized <- TRUE
final_predictors <- initial.predictors
final_adjR2 <- new_adjR2
# run the final model to return the lm output
final_model <- do_lm(data = data,
y.var = y.var,
x.vars = final_predictors,
spatial.auto.model = spatial.auto.model,
crop.intensity = crop.intensity,
mask.soy.area = mask.soy.area)
}
# if model isn't done adding predictors, update initial.predictors for the new iteration
initial.predictors <- c(initial.predictors, new_predictor)
}
# return
return(list(final_model = final_model,
final_predictors = final_predictors,
final_adjR2 = final_adjR2))
}
evaluate_model <- function(lm_results, test.x.vars, orig_data, title) {
print(title)
print(summary(lm_results))
plot(lm_results, which = c(1,2), main = title) # test error is homoscedastic, zero mean, normal
# test pearson's correlation for numeric variables used
df <- orig_data %>% subset(select = test.x.vars[test.x.vars %in% numeric.x.var.names])
test.corr <- cor(df)
print(c('predictor correlation matrix', title))
print(test.corr)
}
str(cell_shp)
head(cell_shp@data)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(rgeos)
library(raster)
library(sf)
library(sp)
library(tmap)
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source('E:/R-code/Modeling/code/FCN_clean_csvs.R')
median_cell_raw <- read.csv('E:/R-code/Modeling/data/median_onset_cell_v2.csv')
percentile5_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile5_onset_cell_v2.csv')
percentile95_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile95_onset_cell_v2.csv')
median_muni_raw <- read.csv('E:/R-code/Modeling/data/median_muni_v2.csv')
percentile5_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile5_muni_v2.csv')
percentile95_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile95_muni_v2.csv')
median_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/median_CARpoly_v2.csv')
percentile5_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile5_CARpoly_v2.csv')
percentile95_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile95_CARpoly_v2.csv')
grid_1deg <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/grid_1deg', layer = 'grid_1deg')
munis <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/munis', layer = 'munis_SHP')
crs(munis) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
cell_shp <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf <- st_read(system.file("E:/R-code/Modeling/data/shp/median_onset_cell/median_onset_cell_SHP.shp", package="sf"), quiet = TRUE)
?st_read
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(rgeos)
library(raster)
library(sf)
library(sp)
library(tmap)
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source('E:/R-code/Modeling/code/FCN_clean_csvs.R')
median_cell_raw <- read.csv('E:/R-code/Modeling/data/median_onset_cell_v2.csv')
percentile5_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile5_onset_cell_v2.csv')
percentile95_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile95_onset_cell_v2.csv')
median_muni_raw <- read.csv('E:/R-code/Modeling/data/median_muni_v2.csv')
percentile5_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile5_muni_v2.csv')
percentile95_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile95_muni_v2.csv')
median_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/median_CARpoly_v2.csv')
percentile5_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile5_CARpoly_v2.csv')
percentile95_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile95_CARpoly_v2.csv')
grid_1deg <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/grid_1deg', layer = 'grid_1deg')
munis <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/munis', layer = 'munis_SHP')
crs(munis) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
cell_shp <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
str(st_read)
str(cell_sf)
cell_sf %>% tidy_by_intensity_plant("single_plant", "double_plant")
cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant")
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") #%>%
#dplyr::select(-c(SC_delay, double_plant, single_harvest, double_harvest))
head(cell_sf)
tail(cell_sf)
View(cell_sf)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") #%>%
#dplyr::select(-c(SC_delay, double_plant, single_harvest, double_harvest))
View(cell_sf_tidy)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") #%>%
dplyr::select(-c(SC_harvest, DCharvest))
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
View(cell_sf_tidy)
View(cell_sf_tidy)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
f1 <- plant_median ~ onset + intensity + latitude + year_index + onset:intensity
m1 <- lm(f1, data=cell_sf_tidy)
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
# do basic OLS model and see if residuals are autocorrelated ----------------------------
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_tidy)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
model_ols <- lm(plant_median ~ onset + intensity + latitude + year_index + onset:intensity, data=cell_tidy)
summary(model_ols)
cell_tidy$residuals <- residuals(model_ols)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
str(residuals(model_ols))
str(cell_sf_tidy)
?residuals
55308*11
length(complete.cases(cell_sf_tidy))
complete.cases(cell_sf_tidy)
nrow(cell_sf_tidy)
?residuals
fitted.values(model_ols)
length(fitted.values(model_ols))
complete.cases(cell_tidy)
complete.cases(cell_sf_tidy)
?complete.cases
complete.cases(data.frame(cell_sf_tidy))
class(cell_sf_tidy)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>% dplyr::filter(complete.cases(.))
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
brks <- quantile(cell_sf_tidy$residuals, 0:(grps-1)/(grps-1), na.rm=TRUE)
?quantile
?quantile
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
brks <- quantile(cell_sf_tidy$residuals, probs = seq(0, 1, 0.2), na.rm=TRUE)
spplot(cell_sf_tidy, "residuals", at=brks, col.regions=rev(brewer.pal(grps, "RdBu")), col="black")
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
brks <- quantile(cell_sf_tidy$residuals, probs = seq(0, 1, 0.2), na.rm=TRUE)
tm_shape(cell_sf_tidy) +
tm_fill(residuals, palette = "Reds", style = "quantile",
title = paste("Quantiles of residuals, all years")) +
tm_borders(alpha=.4)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
brks <- quantile(cell_sf_tidy$residuals, probs = seq(0, 1, 0.2), na.rm=TRUE)
ggplot(cell_sf_tidy) +
geom_sf(aes(fill = residuals)) +
scale_fill_viridis(residuals) +
ggtitle("Residuals for basic OLS") +
theme_bw()
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
brks <- quantile(cell_sf_tidy$residuals, probs = seq(0, 1, 0.2), na.rm=TRUE)
ggplot(cell_sf_tidy) +
geom_sf(aes(fill = residuals)) +
ggtitle("Residuals for basic OLS") +
theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
library(spdep)
nb <- poly2nb(cell_tidy)
library(viridis)
?scale_fill_viridis
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
ggplot(cell_sf_tidy) +
geom_sf(aes(fill = residuals)) +
scale_fill_viridis() +
ggtitle("Residuals for basic OLS") +
theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
library(spdep)
nb <- poly2nb(cell_tidy)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
#ggplot(cell_sf_tidy) +
#  geom_sf(aes(fill = residuals)) +
#  scale_fill_viridis() +
#  ggtitle("Residuals for basic OLS") +
#  theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
library(spdep)
nb <- poly2nb(cell_sf_tidy)
resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
cor(cell_sf_tidy$residuals, resnb)
plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals')
lw <- nb2listw(nb)
?nb2list2
?nb2listw
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
#ggplot(cell_sf_tidy) +
#  geom_sf(aes(fill = residuals)) +
#  scale_fill_viridis() +
#  ggtitle("Residuals for basic OLS") +
#  theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
library(spdep)
nb <- poly2nb(cell_sf_tidy)
resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
cor(cell_sf_tidy$residuals, resnb)
plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals')
lw <- nb2listw(nb, zero.policy = TRUE)
moran.mc(cell_sf_tidy$residuals, lw, 999)
?moran.mc
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
#ggplot(cell_sf_tidy) +
#  geom_sf(aes(fill = residuals)) +
#  scale_fill_viridis() +
#  ggtitle("Residuals for basic OLS") +
#  theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
library(spdep)
nb <- poly2nb(cell_sf_tidy)
resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
cor(cell_sf_tidy$residuals, resnb)
plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals')
lw <- nb2listw(nb, zero.policy = TRUE)
moran.mc(cell_sf_tidy$residuals, lw, 999, zero.policy = TRUE)
# spatial lag model ---------------------------------------------------------------------
m1s = lagsarlm(f1, data=cell_tidy, lw, tol.solve=1.0e-30)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
#ggplot(cell_sf_tidy) +
#  geom_sf(aes(fill = residuals)) +
#  scale_fill_viridis() +
#  ggtitle("Residuals for basic OLS") +
#  theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
library(spdep)
nb <- poly2nb(cell_sf_tidy)
resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
cor(cell_sf_tidy$residuals, resnb)
plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals')
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(cell_sf_tidy$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols')
print(moran_basic_ols)
# spatial lag model ---------------------------------------------------------------------
m1s = lagsarlm(f1, data=cell_tidy, lw, tol.solve=1.0e-30)
# spatial lag model ---------------------------------------------------------------------
model_lag = lagsarlm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy, lw, tol.solve=1.0e-30)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# spatial lag model ---------------------------------------------------------------------
model_lag = lagsarlm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy, lw, tol.solve=1.0e-30)
?lagsarlm
install.packages('spatialreg')
?spgwr
install.packages('spgwr')
?spgwr
library(spgwr)
?spgwr
??spgwr
?gwr.sel
library(spgwr) # spatially weighted regression
#run GWR
#calculate kernel bandwidth
GWRbandwidth <- gwr.sel(plant ~ onset, intensity, lat, year_index,
latitude, onset:intensity,
data = cell_sf_tidy, adapt =TRUE)
library(spgwr) # spatially weighted regression
#run GWR
#calculate kernel bandwidth
GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index +
latitude + onset:intensity,
data = cell_sf_tidy, adapt =TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth
GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index +
latitude + onset:intensity,
data = cell_sf_tidy, adapt =TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth
GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index +
latitude + onset:intensity,
data = cell_spdf_tidy, adapt =TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth
GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt =TRUE)
GWRbandwidth
gwr.model = gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
gwr.model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
?gwr
print(gwr.model)
print('a')
gwr.model
results <-as.data.frame(gwr.model$SDF)
results
GWRbandwidth
print(GWRbandwidth)
print(map1, vp=viewport(layout.pos.col = 1, layout.pos.row =1))
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
#GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
#data = cell_spdf_tidy, adapt =TRUE)
#run the gwr model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
#GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
#data = cell_spdf_tidy, adapt =TRUE)
#run the gwr model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
#GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
#data = cell_spdf_tidy, adapt =TRUE)
#run the gwr model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
# do basic OLS model and see if residuals are autocorrelated ----------------------------
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
model_ols <- lm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy)
summary(model_ols)
cell_sf_tidy$residuals <- residuals(model_ols)
#ggplot(cell_sf_tidy) +
#  geom_sf(aes(fill = residuals)) +
#  scale_fill_viridis() +
#  ggtitle("Residuals for basic OLS") +
#  theme_bw()
# see if basic OLS residuals are autocorrelated with scatterplot -------------------------
nb <- poly2nb(cell_sf_tidy)
library(spgwr) # spatially weighted regression
print('a')
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
#GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
#data = cell_spdf_tidy, adapt =TRUE)
#run the gwr model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
library(spgwr) # spatially weighted regression
print('a')
print(a)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(rgeos)
library(raster)
library(sf)
library(sp)
library(tmap)
library(viridis)
library(spatialreg)
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source('E:/R-code/Modeling/code/FCN_clean_csvs.R')
median_cell_raw <- read.csv('E:/R-code/Modeling/data/median_onset_cell_v2.csv')
percentile5_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile5_onset_cell_v2.csv')
percentile95_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile95_onset_cell_v2.csv')
median_muni_raw <- read.csv('E:/R-code/Modeling/data/median_muni_v2.csv')
percentile5_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile5_muni_v2.csv')
percentile95_muni_raw <- read.csv('E:/R-code/Modeling/data/percentile95_muni_v2.csv')
median_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/median_CARpoly_v2.csv')
percentile5_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile5_CARpoly_v2.csv')
percentile95_CARpoly_raw <- read.csv('E:/R-code/Modeling/data/percentile95_CARpoly_v2.csv')
grid_1deg <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/grid_1deg', layer = 'grid_1deg')
munis <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/munis', layer = 'munis_SHP')
crs(munis) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
#cell_shp <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest))
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
library(spgwr) # spatially weighted regression
print('a')
print(a)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
#GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
#data = cell_spdf_tidy, adapt =TRUE)
#run the gwr model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
#GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
#data = cell_spdf_tidy, adapt =TRUE)
#run the gwr model
gwr.model <- gwr(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE)
library(spgwr) # spatially weighted regression
# turn sf object into SPDF
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_spdf_tidy <- as(cell_sf_tidy, 'Spatial')
#run GWR
#calculate kernel bandwidth (takes a long time)
GWRbandwidth <- gwr.sel(plant ~ onset + intensity + lat + year_index + onset:intensity,
data = cell_spdf_tidy, adapt =TRUE)
?errorsarlm
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# spatial lag model ---------------------------------------------------------------------
model_lag = lagsarlm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy, lw, tol.solve=1.0e-30)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# spatial lag model ---------------------------------------------------------------------
model_lag = lagsarlm(plant ~ onset + intensity + lat + year_index + onset:intensity, data=cell_sf_tidy, lw, tol.solve=1.0e-30)
