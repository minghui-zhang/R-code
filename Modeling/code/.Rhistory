# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((cell_sf_tidy_DC$plant_demeaned - mean(cell_sf_tidy_DC$plant_demeaned))^2)
SSE <- sum((cell_sf_tidy_DC$residuals - mean(cell_sf_tidy_DC$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
print(paste("corr plant-onset", cor(cell_sf_tidy_DC$plant, cell_sf_tidy_DC$onset)))
print(paste("corr plant-lat", cor(cell_sf_tidy_DC$plant, cell_sf_tidy_DC$lat)))
print(paste("corr plant-year", cor(cell_sf_tidy_DC$plant, cell_sf_tidy_DC$year)))
print(paste('sd of fitted. values', sd(cell_sf_tidy_DC$fitted.values)))
# multicollinearity: correlation between predictors
predictors <- cell_sf_tidy_DC[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# exogeneity
plot(cell_sf_tidy_DC$onset, cell_sf_tidy_DC$residuals, main = "spatial panel, onset vs residual (exogeneity)")
plot(cell_sf_tidy_DC$lat, cell_sf_tidy_DC$residuals, main = "spatial panel, latitude vs residual (exogeneity)")
plot(cell_sf_tidy_DC$year, cell_sf_tidy_DC$residuals, main = "spatial sample, year vs residual (exogeneity)")
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
to_autocorrelation <- cell_sf_tidy_DC[cell_sf_tidy_DC$year == year_oi, ]
nb <- poly2nb(to_autocorrelation)
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation$residuals, lw, 999, zero.policy = TRUE)
print('moran I residual')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
# full DC data:
full_DC_cell_sf_tidy <- cell_sf_tidy %>%
filter(intensity == "DC")
print(paste('percent total data used:', 100*nrow(cell_sf_tidy_DC)/nrow(full_DC_cell_sf_tidy)))
# # see if basic OLS residuals are temporally autocorrelated -----------------------------------------------------------
#
# # create observation data frame, for DC only.
# # need to rename cell_ID so the same cell_ID can correspond to multiple years
DC_cell <- cell_sf_tidy_DC
#
# # filter out all cells where there isn't data for all years
st_geometry(DC_cell) <- NULL
DC_cell <- DC_cell[complete.cases(DC_cell),]
cells_list <- list()
i <- 1
for (year in 2004:2014) {
cells_in_year <- DC_cell[DC_cell$year == year,]
cells_list[[i]] <- cells_in_year$label
i <- i + 1
}
full_data_cells <- Reduce(intersect, cells_list)
DC_cell <- DC_cell[DC_cell$label %in% full_data_cells, ]
DC_nested_cell <- group_by(data.frame(DC_cell), label) %>% nest()
dwtest_one_cell <- function(data) {
dwtest(residuals ~ 1, data = data)
}
DC_cell <- DC_nested_cell %>%
mutate(dwtest = map(data, dwtest_one_cell)) %>%
mutate(test_df = map(dwtest, tidy)) %>%
unnest(test_df)
# calculate proportion of p values below 5% significance, with Bonferroni correction
DC_percent_auto <- mean(DC_cell$p.value < 0.05/nrow(DC_cell)) * 100
print(paste('percent p values below 5% significance with Bonferroni correction', DC_percent_auto))
# plot areas with temporal autocorrelation in residuals
# DC
DC_temporalAuto <- as.data.frame(DC_cell[, c("label", "p.value")]) %>%
mutate(dwi.autocorr.p.value = p.value)
cell_sf_tidy_DC_tmp <- merge(cell_sf_tidy_DC, DC_temporalAuto)
cell_DC_tempAuto <- cell_sf_tidy_DC_tmp %>%
filter(dwi.autocorr.p.value < 0.05)
# DC
plot_cell_tempAuto(year_oi, cell_DC_tempAuto, "DC")
plot(cell_sf_tidy_DC$year, cell_sf_tidy_DC$residuals)
abline(h = 0)
# print map to show cell_ID, for plotting residual, onset and plant over time
# pal <- colorNumeric(
#   palette = "YlGnBu",
#   domain = cell_DC_tempAuto$dwi.autocorr.p.value
# )
#
# leaflet(cell_DC_tempAuto) %>%
#   addTiles() %>%
#   addPolygons(weight = 0.1,
#     color = ~pal(dwi.autocorr.p.value),
#               popup = cell_DC_tempAuto$cell_ID) %>%
#   addLegend("bottomright",
#             pal = pal,
#             values = ~dwi.autocorr.p.value,
#             title = "dwi.autocorr.p.value",
#             opacity = 1
# )
#
# cell_ID_oi <- "+3895+4563"
#
# specific_cell <- cell_sf_tidy_DC %>%
#                     filter(cell_ID == cell_ID_oi)
#
# plot(specific_cell$year, specific_cell$residuals, type = "l", col = "red", lwd = 2.5,
#      ylim = c(-30, 50), ylab = "day", xlab = "year",
#      main = paste("spatial panel for cell", cell_ID_oi))
# lines(specific_cell$year, specific_cell$plant_demeaned, col = "green")
# lines(specific_cell$year, specific_cell$onset_demeaned, col = "blue")
# legend(2004, 50, legend=c("residual", "plant demeaned", "onset demeaned"),
#        col=c("red", "green", "blue"), lty=c(1,1,1))
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = spml(plant_demeaned ~ 1, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- model_intercept['(Intercept)']
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = spml(plant_demeaned ~ 1, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- model_intercept['(Intercept)']
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = lm(plant_demeaned ~ 1, data=train_data)
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- model_intercept['(Intercept)']
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = lm(plant_demeaned ~ 1, data=train_data)
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model_intercept$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- model_intercept['(Intercept)']
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = lm(plant_demeaned ~ 1, data=train_data)
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- model_intercept['(Intercept)']
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = lm(plant_demeaned ~ 1, data=train_data)
print('model_intercept')
print(model_intercept)
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- model_intercept['(Intercept)']
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = lm(plant_demeaned ~ 1, data=train_data)
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- rep(0, legnth(test_data$plant_demeaned)) # everything was demeaned
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
# runs the model with options to eliminate a year
run_model <- function(full_data, weights, year_to_elim, elim_year) {
# separate training and test data
if (elim_year) {
train_data <- full_data[full_data$year != year_to_elim,]
test_data <- full_data[full_data$year == year_to_elim,]
}
else {
train_data <- full_data
test_data <- full_data
}
# recalculate demeaned values for train and test data
train_data$plant_demeaned <- (train_data$plant - mean(train_data$plant, na.rm = TRUE))
train_data$onset_demeaned <- (train_data$onset - mean(train_data$onset, na.rm = TRUE))
train_data$lat_demeaned <- (train_data$lat - mean(train_data$lat, na.rm = TRUE))
test_data$plant_demeaned <- (test_data$plant - mean(test_data$plant, na.rm = TRUE))
test_data$onset_demeaned <- (test_data$onset - mean(test_data$onset, na.rm = TRUE))
test_data$lat_demeaned <- (test_data$lat - mean(test_data$lat, na.rm = TRUE))
model = spml(plant_demeaned ~ onset_demeaned + year_index + lat_demeaned, data=train_data, listw=weights,
model = "random", lag = TRUE, spatial.error = "b")
model_intercept = lm(plant_demeaned ~ 1, data=train_data)
print(paste('finished model for year', year_to_elim))
# extract onset coef and R2 from model
onset_coef <- model$coefficients['onset_demeaned']
year_coef <- model$coefficients['year_index']
lat_coef <- model$coefficients['lat_demeaned']
intercept <- model$coefficients['(Intercept)']
train_data$residuals <- residuals(model)
SST <- sum((train_data$plant - mean(train_data$plant))^2)
SSE <- sum((train_data$residuals - mean(train_data$residuals))^2)
R2 <- 1 - SSE/SST
# prediction
prediction_demeaned <- intercept + onset_coef*test_data$onset_demeaned + year_coef*test_data$year_index + lat_coef*test_data$lat_demeaned
error <- rmse(prediction_demeaned, test_data$plant_demeaned)
# intercept only model
prediction_intercept <- rep(0, length(test_data$plant_demeaned)) # everything was demeaned
print(paste('prediction intercept', prediction_intercept))
error_intercept <- rmse(prediction_intercept, test_data$plant_demeaned)
diff_error <- error_intercept - error
# output
output <- c(as.integer(year_to_elim), onset_coef, R2, error, diff_error)
names(output) <- c("eliminated_year", "onset", "R2", "RMSE", "RMSE_improvement")
return(output)
}
prediction_results <- data.frame()
for (year in 2004:2014) {
result <- run_model(cell_tidy_DC_pdfo, lw, year, TRUE)
prediction_results <- rbind(prediction_results, result)
}
names(prediction_results) <- names(result)
plot(prediction_results$eliminated_year, prediction_results$RMSE,
ylab = "RMSE", xlab = "eliminated year", type = "l", ylim = c(5, 25), main = "Prediction RMSE, spatial panel")
plot(prediction_results$eliminated_year, prediction_results$RMSE_improvement,
ylab = "RMSE", xlab = "eliminated year", type = "l", ylim = c(0, 10), main = "Prediction RMSE improvement over intercept, spatial panel")
plot(prediction_results$eliminated_year, prediction_results$onset, type = "l", col = "red", ylab = "coef or R2", xlab = "eliminated year", ylim = c(0, 0.7), main = "Prediction onset and R2, spatial panel")
lines(prediction_results$eliminated_year, prediction_results$R2, col = "blue")
legend(2004, 0.65, legend = c("onset coef", "R2"), col = c("red", "blue"), lty= c(1,1))
