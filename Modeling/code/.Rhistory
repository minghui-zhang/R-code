lon_offset <- 0
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 1.25)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2008 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant/onset and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$onset, samples_polys$residuals, main = "spatial sample, onset vs residual (exogeneity)")
plot(samples_polys$lat, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
plot(samples_polys$year, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
abline(h = 0)
# multicollinearity: correlation between predictors
predictors <- samples_polys[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
# need 'one layer': one year, one intensity
to_autocorrelation <- samples_polys[samples_polys$year == year_oi & samples_polys$intensity == "DC", ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
# nb <- poly2nb(to_autocorrelation) #IF SAMPLES IS POLYGON DATA
nb<-knn2nb(knearneigh(to_autocorrelation_points)) # IF SAMPLES IS POINT DATA
# #resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
# #plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 999, zero.policy = TRUE)
print('moran I for residuals')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation_points$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation_points$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
print(paste('percent total data used:', 100*nrow(samples_polys)/nrow(cell_sf_tidy)))
year_oi <- 2008 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 1 # shift by 0.25 units
lon_offset <- 0
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 1.25)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2008 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant/onset and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$onset, samples_polys$residuals, main = "spatial sample, onset vs residual (exogeneity)")
plot(samples_polys$lat, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
plot(samples_polys$year, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
abline(h = 0)
# multicollinearity: correlation between predictors
predictors <- samples_polys[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
# need 'one layer': one year, one intensity
to_autocorrelation <- samples_polys[samples_polys$year == year_oi & samples_polys$intensity == "DC", ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
# nb <- poly2nb(to_autocorrelation) #IF SAMPLES IS POLYGON DATA
nb<-knn2nb(knearneigh(to_autocorrelation_points)) # IF SAMPLES IS POINT DATA
# #resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
# #plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 999, zero.policy = TRUE)
print('moran I for residuals')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation_points$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation_points$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
print(paste('percent total data used:', 100*nrow(samples_polys)/nrow(cell_sf_tidy)))
year_oi <- 2008 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 0 # shift by 0.25 units
lon_offset <- 0.5
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 1.25)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2008 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant/onset and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$onset, samples_polys$residuals, main = "spatial sample, onset vs residual (exogeneity)")
plot(samples_polys$lat, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
plot(samples_polys$year, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
abline(h = 0)
# multicollinearity: correlation between predictors
predictors <- samples_polys[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
# need 'one layer': one year, one intensity
to_autocorrelation <- samples_polys[samples_polys$year == year_oi & samples_polys$intensity == "DC", ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
# nb <- poly2nb(to_autocorrelation) #IF SAMPLES IS POLYGON DATA
nb<-knn2nb(knearneigh(to_autocorrelation_points)) # IF SAMPLES IS POINT DATA
# #resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
# #plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 999, zero.policy = TRUE)
print('moran I for residuals')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation_points$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation_points$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
print(paste('percent total data used:', 100*nrow(samples_polys)/nrow(cell_sf_tidy)))
year_oi <- 2008 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 0 # shift by 0.25 units
lon_offset <- 1
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 1.25)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2008 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant/onset and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$onset, samples_polys$residuals, main = "spatial sample, onset vs residual (exogeneity)")
plot(samples_polys$lat, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
plot(samples_polys$year, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
abline(h = 0)
# multicollinearity: correlation between predictors
predictors <- samples_polys[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
# need 'one layer': one year, one intensity
to_autocorrelation <- samples_polys[samples_polys$year == year_oi & samples_polys$intensity == "DC", ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
# nb <- poly2nb(to_autocorrelation) #IF SAMPLES IS POLYGON DATA
nb<-knn2nb(knearneigh(to_autocorrelation_points)) # IF SAMPLES IS POINT DATA
# #resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
# #plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 999, zero.policy = TRUE)
print('moran I for residuals')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation_points$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation_points$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
print(paste('percent total data used:', 100*nrow(samples_polys)/nrow(cell_sf_tidy)))
year_oi <- 2008 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 0.5 # shift by 0.25 units
lon_offset <- 0.5
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 1.25)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2008 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant/onset and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$onset, samples_polys$residuals, main = "spatial sample, onset vs residual (exogeneity)")
plot(samples_polys$lat, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
plot(samples_polys$year, samples_polys$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
abline(h = 0)
# multicollinearity: correlation between predictors
predictors <- samples_polys[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
# need 'one layer': one year, one intensity
to_autocorrelation <- samples_polys[samples_polys$year == year_oi & samples_polys$intensity == "DC", ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
# nb <- poly2nb(to_autocorrelation) #IF SAMPLES IS POLYGON DATA
nb<-knn2nb(knearneigh(to_autocorrelation_points)) # IF SAMPLES IS POINT DATA
# #resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
# #plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 999, zero.policy = TRUE)
print('moran I for residuals')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation_points$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation_points$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
print(paste('percent total data used:', 100*nrow(samples_polys)/nrow(cell_sf_tidy)))
