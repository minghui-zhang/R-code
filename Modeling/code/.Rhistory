ggplot(onset_results, aes(x = grid_index, y = year_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = year_coef - year_stderr, ymax = year_coef + year_stderr)) +
theme_bw()
# label which cells were planted before onset
cell_sf_tidy$beforeonset <- ifelse(cell_sf_tidy$onset > cell_sf_tidy$plant, 1, 0)
# distributions
ggplot(cell_sf_tidy, aes(x = plant)) +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 1), fill = "red") +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 0), fill = "gray", alpha = 0.3) +
facet_wrap(~ year_factor) +
theme_bw()
# percent of people planting before onset
cell_df_tidy <- cell_sf_tidy %>% st_set_geometry(NULL)
cell_df_tidy_byYear <- cell_df_tidy %>%
group_by(year) %>%
summarize(num_before_onset = sum(beforeonset, na.rm = TRUE),
total_cells = length(which(!is.na(beforeonset))),
mean_onset = mean(onset[which(!is.na(beforeonset))])) %>% # mean onset ONLY ON CELLS WITH SOY
mutate(percent_before_onset = 100*num_before_onset/total_cells)
cell_df_tidy_byRegion <- cell_df_tidy %>%
group_by(region) %>%
summarize(num_before_onset = sum(beforeonset, na.rm = TRUE),
total_cells = length(which(!is.na(beforeonset))),
mean_onset = mean(onset[which(!is.na(beforeonset))])) %>% # mean onset ONLY ON CELLS WITH SOY
mutate(percent_before_onset = 100*num_before_onset/total_cells)
ggplot(cell_df_tidy_byYear, aes(x = mean_onset, y = percent_before_onset)) +
geom_point() +
geom_text(aes(label=year),hjust=0, vjust=0) +
theme_bw()
ggplot(cell_df_tidy_byYear, aes(x = year, y = percent_before_onset)) +
geom_point() +
theme_bw()
# check to see if onset coef is different for cells planted before vs after onset
# run model for only north and only south
cell_sf_tidy_before <- cell_sf_tidy[cell_sf_tidy$beforeonset == 1 & cell_sf_tidy$plant_stat_type == "median",]
cell_sf_tidy_after <- cell_sf_tidy[cell_sf_tidy$beforeonset == 0,]
agg_scheme = FALSE
do_elim_year = FALSE
grid_size = 0.75
onset_results <- data.frame() # to save which grid offsets give a significant difference in onset coef between median and percentile plant
grid_index = 0
for (lat_offset in seq(0, 1.5, by = 0.25)) { # 0 to 1.5
for (lon_offset in seq(0, 1.5, by = 0.25)) { # 0 to 1.5
grid_index = grid_index + 1 # to keep track for plotting
# run OLS for cells planted before vs after onset
# for before, the number of points is very low, so
formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
f <- as.formula(formula.string)
before_model = lm(f, data=cell_sf_tidy_before)
before_coefficients <- before_model$coefficients
before_onset_coef <- before_coefficients["onset"]
before_intensity_coef <- before_coefficients["intensitySC"]
before_lat_coef <- before_coefficients["lat"]
before_year_coef <- before_coefficients["year_index"]
before_std_errors <- summary(before_model)$coefficients[,2]
before_onset_std_error <- before_std_errors["onset"]
before_intensity_std_error <- before_std_errors["intensitySC"]
before_lat_std_error <- before_std_errors["lat"]
before_year_std_error <- before_std_errors["year_index"]
after_output <- run_OLS(full_data = cell_sf_tidy_after,
predictors = c("onset", "intensity",
"lat", "lon", # for spatial effects: lat, lon, region, Muni_code
"year_index" # for time effects
),
y.var = "plant", plant_stat = "median",
grid_size = grid_size,
lat_offset = lat_offset, lon_offset = lon_offset, agg_scheme = agg_scheme,
plot_samples = FALSE, plot_model_evals = FALSE,
year_oi = 2007,
do_elim_year = do_elim_year,
chosen_intensity = "DC")
# get onset coefficients and see if statistically different
output <- data.frame(onset_coef = c(before_onset_coef, after_output$onset_coef),
onset_stderr = c(before_onset_std_error, after_output$onset_std_error),
intensity_coef = c(before_intensity_coef, after_output$intensity_coef),
intensity_stderr = c(before_intensity_std_error,
after_output$intensity_std_error),
lat_coef = c(before_lat_coef, after_output$lat_coef),
lat_stderr = c(before_lat_std_error,
after_output$lat_std_error),
year_coef = c(before_year_coef, after_output$year_coef),
year_stderr = c(before_year_std_error,
after_output$year_std_error),
plant_stat_type = c("before", "after"),
grid = c(grid_index, grid_index))
onset_results <- rbind(onset_results, output)
}
}
names(onset_results) <- c('onset_coef', 'onset_stderr', 'intensity_coef', 'intensity_stderr',
'lat_coef', 'lat_stderr', 'year_coef', 'year_stderr',
'plant_stat_type', 'grid_index')
ggplot(onset_results, aes(x = grid_index, y = onset_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = onset_coef - onset_stderr, ymax = onset_coef + onset_stderr)) +
theme_bw()
ggplot(onset_results, aes(x = grid_index, y = intensity_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = intensity_coef - intensity_stderr, ymax = intensity_coef + intensity_stderr)) +
theme_bw()
ggplot(onset_results, aes(x = grid_index, y = lat_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lat_coef - lat_stderr, ymax = lat_coef + lat_stderr)) +
theme_bw()
ggplot(onset_results, aes(x = grid_index, y = year_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = year_coef - year_stderr, ymax = year_coef + year_stderr)) +
theme_bw()
# label which cells were planted before onset
cell_sf_tidy$beforeonset <- ifelse(cell_sf_tidy$onset > cell_sf_tidy$plant, 1, 0)
# distributions
ggplot(cell_sf_tidy, aes(x = plant)) +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 1), fill = "red") +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 0), fill = "gray", alpha = 0.3) +
facet_wrap(~ year_factor) +
theme_bw()
ggplot(cell_sf_tidy, aes(x = delay)) +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 1), fill = "red") +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 0), fill = "gray", alpha = 0.3) +
facet_wrap(~ year_factor) +
theme_bw()
names(cell_sf_tidy)
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_plant$onset
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
# label which cells were planted before onset
cell_sf_tidy$beforeonset <- ifelse(cell_sf_tidy$onset > cell_sf_tidy$plant, 1, 0)
# distributions
ggplot(cell_sf_tidy, aes(x = plant)) +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 1), fill = "red") +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 0), fill = "gray", alpha = 0.3) +
facet_wrap(~ year_factor) +
theme_bw()
ggplot(cell_sf_tidy, aes(x = delay)) +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 1), fill = "red") +
geom_histogram(data = subset(cell_sf_tidy, beforeonset == 0), fill = "gray", alpha = 0.3) +
facet_wrap(~ year_factor) +
theme_bw()
# percent of people planting before onset
cell_df_tidy <- cell_sf_tidy %>% st_set_geometry(NULL)
cell_df_tidy_byYear <- cell_df_tidy %>%
group_by(year) %>%
summarize(num_before_onset = sum(beforeonset, na.rm = TRUE),
total_cells = length(which(!is.na(beforeonset))),
mean_onset = mean(onset[which(!is.na(beforeonset))])) %>% # mean onset ONLY ON CELLS WITH SOY
mutate(percent_before_onset = 100*num_before_onset/total_cells)
cell_df_tidy_byRegion <- cell_df_tidy %>%
group_by(region) %>%
summarize(num_before_onset = sum(beforeonset, na.rm = TRUE),
total_cells = length(which(!is.na(beforeonset))),
mean_onset = mean(onset[which(!is.na(beforeonset))])) %>% # mean onset ONLY ON CELLS WITH SOY
mutate(percent_before_onset = 100*num_before_onset/total_cells)
ggplot(cell_df_tidy_byYear, aes(x = mean_onset, y = percent_before_onset)) +
geom_point() +
geom_text(aes(label=year),hjust=0, vjust=0) +
theme_bw()
ggplot(cell_df_tidy_byYear, aes(x = year, y = percent_before_onset)) +
geom_point() +
theme_bw()
# check to see if onset coef is different for cells planted before vs after onset
# run model for only north and only south
cell_sf_tidy_before <- cell_sf_tidy[cell_sf_tidy$beforeonset == 1 & cell_sf_tidy$plant_stat_type == "median",]
cell_sf_tidy_after <- cell_sf_tidy[cell_sf_tidy$beforeonset == 0,]
agg_scheme = FALSE
do_elim_year = FALSE
grid_size = 0.75
onset_results <- data.frame() # to save which grid offsets give a significant difference in onset coef between median and percentile plant
grid_index = 0
for (lat_offset in seq(0, 0, by = 0.25)) { # 0 to 1.5
for (lon_offset in seq(0, 0, by = 0.25)) { # 0 to 1.5
grid_index = grid_index + 1 # to keep track for plotting
# run OLS for cells planted before vs after onset
# for before, the number of points is very low, so
formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
f <- as.formula(formula.string)
before_model = lm(f, data=cell_sf_tidy_before)
before_coefficients <- before_model$coefficients
before_onset_coef <- before_coefficients["onset"]
before_intensity_coef <- before_coefficients["intensitySC"]
before_lat_coef <- before_coefficients["lat"]
before_year_coef <- before_coefficients["year_index"]
before_std_errors <- summary(before_model)$coefficients[,2]
before_onset_std_error <- before_std_errors["onset"]
before_intensity_std_error <- before_std_errors["intensitySC"]
before_lat_std_error <- before_std_errors["lat"]
before_year_std_error <- before_std_errors["year_index"]
after_output <- run_OLS(full_data = cell_sf_tidy_after,
predictors = c("onset", "intensity",
"lat", "lon", # for spatial effects: lat, lon, region, Muni_code
"year_index" # for time effects
),
y.var = "plant", plant_stat = "median",
grid_size = grid_size,
lat_offset = lat_offset, lon_offset = lon_offset, agg_scheme = agg_scheme,
plot_samples = FALSE, plot_model_evals = FALSE,
year_oi = 2007,
do_elim_year = do_elim_year,
chosen_intensity = "DC")
# get onset coefficients and see if statistically different
output <- data.frame(onset_coef = c(before_onset_coef, after_output$onset_coef),
onset_stderr = c(before_onset_std_error, after_output$onset_std_error),
intensity_coef = c(before_intensity_coef, after_output$intensity_coef),
intensity_stderr = c(before_intensity_std_error,
after_output$intensity_std_error),
lat_coef = c(before_lat_coef, after_output$lat_coef),
lat_stderr = c(before_lat_std_error,
after_output$lat_std_error),
year_coef = c(before_year_coef, after_output$year_coef),
year_stderr = c(before_year_std_error,
after_output$year_std_error),
plant_stat_type = c("before", "after"),
grid = c(grid_index, grid_index))
onset_results <- rbind(onset_results, output)
}
}
names(onset_results) <- c('onset_coef', 'onset_stderr', 'intensity_coef', 'intensity_stderr',
'lat_coef', 'lat_stderr', 'year_coef', 'year_stderr',
'plant_stat_type', 'grid_index')
ggplot(onset_results, aes(x = grid_index, y = onset_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = onset_coef - onset_stderr, ymax = onset_coef + onset_stderr)) +
theme_bw()
ggplot(onset_results, aes(x = grid_index, y = intensity_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = intensity_coef - intensity_stderr, ymax = intensity_coef + intensity_stderr)) +
theme_bw()
ggplot(onset_results, aes(x = grid_index, y = lat_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = lat_coef - lat_stderr, ymax = lat_coef + lat_stderr)) +
theme_bw()
ggplot(onset_results, aes(x = grid_index, y = year_coef, col = plant_stat_type)) +
geom_point(size = 3) +
geom_line() +
geom_errorbar(aes(ymin = year_coef - year_stderr, ymax = year_coef + year_stderr)) +
theme_bw()
sample(c(1,2,3), replace = FALSE)
onset_random <- sample(cell_sf_tidy$onset, replace = FALSE)
onset_random
# jumble the onset for all cells
cell_sf_tidy$onset_random <- sample(cell_sf_tidy$onset, replace = FALSE)
# run model of all cells with onset and onset_random
ordered.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
ordered.f <- as.formula(ordered.formula.string)
ordered_model = lm(ordered.f, data=cell_sf_tidy)
ordered_coefficients <- ordered_model$coefficients
ordered_std_errors <- summary(before_model)$coefficients[,2]
ordered_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(ordered_coefficients["onset"], ordered_coefficients["intensitySC"],
ordered_coefficients["lat"], ordered_coefficients["year_index"]),
std_error = c(ordered_std_errors["onset"], ordered_std_errors["intensitySC"],
ordered_std_errors["lat"], ordered_std_errors["year_index"]))
random.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random_model = lm(random.f, data=cell_sf_tidy)
random_coefficients <- random_model$coefficients
random_std_errors <- summary(random_model)$coefficients[,2]
random_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(random_coefficients["onset"], random_coefficients["intensitySC"],
random_coefficients["lat"], random_coefficients["year_index"]),
std_error = c(random_std_errors["onset"], randomd_std_errors["intensitySC"],
random_std_errors["lat"], random_std_errors["year_index"]))
# jumble the onset for all cells
cell_sf_tidy$onset_random <- sample(cell_sf_tidy$onset, replace = FALSE)
# run model of all cells with onset and onset_random
ordered.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
ordered.f <- as.formula(ordered.formula.string)
ordered_model = lm(ordered.f, data=cell_sf_tidy)
ordered_coefficients <- ordered_model$coefficients
ordered_std_errors <- summary(before_model)$coefficients[,2]
ordered_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(ordered_coefficients["onset"], ordered_coefficients["intensitySC"],
ordered_coefficients["lat"], ordered_coefficients["year_index"]),
std_error = c(ordered_std_errors["onset"], ordered_std_errors["intensitySC"],
ordered_std_errors["lat"], ordered_std_errors["year_index"]))
random.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random_model = lm(random.f, data=cell_sf_tidy)
random_coefficients <- random_model$coefficients
random_std_errors <- summary(random_model)$coefficients[,2]
random_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(random_coefficients["onset"], random_coefficients["intensitySC"],
random_coefficients["lat"], random_coefficients["year_index"]),
std_error = c(random_std_errors["onset"], random_std_errors["intensitySC"],
random_std_errors["lat"], random_std_errors["year_index"]))
print('ordered')
print(ordered_results)
print('random')
print(random_results)
# jumble the onset for all cells
cell_sf_tidy$onset_random <- sample(cell_sf_tidy$onset, replace = FALSE)
# run model of all cells with onset and onset_random
ordered.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
ordered.f <- as.formula(ordered.formula.string)
ordered_model = lm(ordered.f, data=cell_sf_tidy)
ordered_coefficients <- ordered_model$coefficients
ordered_std_errors <- summary(before_model)$coefficients[,2]
ordered_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(ordered_coefficients["onset"], ordered_coefficients["intensitySC"],
ordered_coefficients["lat"], ordered_coefficients["year_index"]),
std_error = c(ordered_std_errors["onset"], ordered_std_errors["intensitySC"],
ordered_std_errors["lat"], ordered_std_errors["year_index"]))
random.formula.string <- paste("plant", paste(c("onset_random", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random_model = lm(random.f, data=cell_sf_tidy)
random_coefficients <- random_model$coefficients
random_std_errors <- summary(random_model)$coefficients[,2]
random_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(random_coefficients["onset"], random_coefficients["intensitySC"],
random_coefficients["lat"], random_coefficients["year_index"]),
std_error = c(random_std_errors["onset"], random_std_errors["intensitySC"],
random_std_errors["lat"], random_std_errors["year_index"]))
# jumble the onset for all cells
cell_sf_tidy$onset_random <- sample(cell_sf_tidy$onset, replace = FALSE)
# run model of all cells with onset and onset_random
ordered.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
ordered.f <- as.formula(ordered.formula.string)
ordered_model = lm(ordered.f, data=cell_sf_tidy)
ordered_coefficients <- ordered_model$coefficients
ordered_std_errors <- summary(before_model)$coefficients[,2]
ordered_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(ordered_coefficients["onset"], ordered_coefficients["intensitySC"],
ordered_coefficients["lat"], ordered_coefficients["year_index"]),
std_error = c(ordered_std_errors["onset"], ordered_std_errors["intensitySC"],
ordered_std_errors["lat"], ordered_std_errors["year_index"]))
random.formula.string <- paste("plant", paste(c("onset_random", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random_model = lm(random.f, data=cell_sf_tidy)
random_coefficients <- random_model$coefficients
random_std_errors <- summary(random_model)$coefficients[,2]
random_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(random_coefficients["onset_random"], random_coefficients["intensitySC"],
random_coefficients["lat"], random_coefficients["year_index"]),
std_error = c(random_std_errors["onset_random"], random_std_errors["intensitySC"],
random_std_errors["lat"], random_std_errors["year_index"]))
print('ordered')
print(ordered_results)
print('random')
print(random_results)
# jumble the onset for all cells
cell_sf_tidy$onset_random <- sample(cell_sf_tidy$onset, replace = FALSE)
# run model of all cells with onset and onset_random
ordered.formula.string <- paste("plant", paste(c("onset", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
ordered.f <- as.formula(ordered.formula.string)
ordered_model = lm(ordered.f, data=cell_sf_tidy)
ordered_coefficients <- ordered_model$coefficients
ordered_std_errors <- summary(before_model)$coefficients[,2]
ordered_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(ordered_coefficients["onset"], ordered_coefficients["intensitySC"],
ordered_coefficients["lat"], ordered_coefficients["year_index"]),
std_error = c(ordered_std_errors["onset"], ordered_std_errors["intensitySC"],
ordered_std_errors["lat"], ordered_std_errors["year_index"]))
random.formula.string <- paste("plant", paste(c("onset_random", "intensity", "lat", "lon", "year_index"), collapse = " + "), sep = " ~ ")
random.f <- as.formula(random.formula.string)
random_model = lm(random.f, data=cell_sf_tidy)
random_coefficients <- random_model$coefficients
random_std_errors <- summary(random_model)$coefficients[,2]
random_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(random_coefficients["onset_random"], random_coefficients["intensitySC"],
random_coefficients["lat"], random_coefficients["year_index"]),
std_error = c(random_std_errors["onset_random"], random_std_errors["intensitySC"],
random_std_errors["lat"], random_std_errors["year_index"]))
# run model of cells with planting before onset
cell_sf_tidy_before <- cell_sf_tidy[cell_sf_tidy$beforeonset == 1 & cell_sf_tidy$plant_stat_type == "median",]
ordered_model = lm(ordered.f, data=cell_sf_tidy_before)
ordered_coefficients <- ordered_model$coefficients
ordered_std_errors <- summary(before_model)$coefficients[,2]
ordered_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(ordered_coefficients["onset"], ordered_coefficients["intensitySC"],
ordered_coefficients["lat"], ordered_coefficients["year_index"]),
std_error = c(ordered_std_errors["onset"], ordered_std_errors["intensitySC"],
ordered_std_errors["lat"], ordered_std_errors["year_index"]))
random_model = lm(random.f, data=cell_sf_tidy_before)
random_coefficients <- random_model$coefficients
random_std_errors <- summary(random_model)$coefficients[,2]
random_results <- data.frame(variable = c("onset", "intensity", "lat", "year"),
coef = c(random_coefficients["onset_random"], random_coefficients["intensitySC"],
random_coefficients["lat"], random_coefficients["year_index"]),
std_error = c(random_std_errors["onset_random"], random_std_errors["intensitySC"],
random_std_errors["lat"], random_std_errors["year_index"]))
print('ordered')
print(ordered_results)
print('random')
print(random_results)
library(ggplot2)
library(tidyverse)
library(broom)
library(dplyr)
library(rgdal)
library(rgeos)
library(raster)
library(sf)
library(sp)
library(tmap)
library(viridis)
library(spdep)
library(spatialreg)
library(lmtest)
library(Metrics) # for rmse
library(leaflet)
library(leaps) # stepwise model selection
#E:/R-code/Modeling/code/FCN_clean_csvs.R
#~/Documents/R-code
source('E:/R-code/Modeling/code/FCN_clean_csvs.R')
source('E:/R-code/Modeling/code/FCN_plotting.R')
source('E:/R-code/Modeling/code/FCN_sample_data.R')
source('E:/R-code/Modeling/code/FCN_run_model_spatial_sampled.R')
MT_outline <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/MatoGrossoOutline', layer = 'MatoGrossoOutline')
crs(MT_outline) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
median_cell_raw <- read.csv('E:/R-code/Modeling/data/median_onset_cell_v2.csv')
percentile5_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile5_onset_cell_v2.csv')
percentile95_cell_raw <- read.csv('E:/R-code/Modeling/data/percentile95_onset_cell_v2.csv')
grid_1deg <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/grid_1deg', layer = 'grid_1deg')
munis <- readOGR(dsn = 'E:/R-code/Modeling/data/shp/munis', layer = 'munis_SHP')
crs(munis) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
cell_sf <- st_read(dsn = 'E:/R-code/Modeling/data/shp/median_onset_cell', layer = 'median_onset_cell_SHP')
min_soy_area <- 2 #km2. min area of total or SC/DC soy in cell, muni or property to be considered in model
# CSV DATA -----------------------------------------------------------------------------------------------------------------
# median cell
median_cell <- median_cell_raw %>% delete_cols_median_cell() %>%
rename_cols_median_cell()
median_cell$plant_stat_type <- rep('median', nrow(median_cell))
# percentiles
percentile5_cell <- percentile5_cell_raw %>% rename_cols_percentile_cell()
percentile95_cell <- percentile95_cell_raw %>% rename_cols_percentile_cell()
# SF DATA ------------------------------------------------------------------------------------------------
# get cell_ID column for median
cell_sf$cell_ID <- median_cell$cell_ID
cell_sf$cell_ID <- sapply(as.character(cell_sf$cell_ID), clean_cell_ID)
# join median, percentile data to cell_sf
# cell_sf has median information, but copy it and put in percentile info for DC and SC plant
cell_sf$plant_stat_type <- rep("median", nrow(cell_sf))
cell_sf_percentile5 <- cell_sf
cell_sf_percentile5$SC_plant <- percentile5_cell$SC_plant
cell_sf_percentile5$DC_plant <- percentile5_cell$DC_plant
cell_sf_percentile5$plant_stat_type <- rep("percentile5", nrow(cell_sf_percentile5))
cell_sf_percentile95 <- cell_sf
cell_sf_percentile95$SC_plant <- percentile95_cell$SC_plant
cell_sf_percentile95$DC_plant <- percentile95_cell$DC_plant
cell_sf_percentile95$plant_stat_type <- rep("percentile95", nrow(cell_sf_percentile95))
cell_sf <- rbind(cell_sf, cell_sf_percentile5, cell_sf_percentile95)
cell_sf_tidy <- cell_sf %>% tidy_by_intensity_plant("SC_plant", "DC_plant") %>%
#tidy_by_intensity_delay("SC_delay", "DC_delay") %>%
dplyr::select(-c(SC_harvest, DC_harvest)) %>%
categorize_regions_cell_sf_tidy() # categorize cells into four regions
cell_sf_tidy$year_index <- cell_sf_tidy$year - 2003
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$delay <- cell_sf_tidy$plant - cell_sf_tidy$onset
shiny::runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
runApp('E:/R-code/Webpage/cropTiming2')
