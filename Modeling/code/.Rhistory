print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$year, samples_polys$residuals)
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
nb <- poly2nb(samples_polys) #IF SAMPLES IS POLYGON DATA
#nb<-knn2nb(knearneigh(samples_points)) # IF SAMPLES IS POINT DATA
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(samples_polys$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols, all years')
print(moran_basic_ols)
# # # see if basic OLS residuals are temporally autocorrelated -----------------------------------------------------------
# #
# # # create observation data frame, for DC only.
# # # need to rename cell_ID so the same cell_ID can correspond to multiple years
#  DC_cell <- samples[samples$intensity == "DC",]
# #
# # # filter out all cells where there isn't data for all years
#  st_geometry(DC_cell) <- NULL
#  DC_cell <- DC_cell[complete.cases(DC_cell),]
#  cells_list <- list()
#  i <- 1
#  for (year in 2004:2014) {
#    cells_in_year <- DC_cell[DC_cell$year == year,]
#    cells_list[[i]] <- cells_in_year$label
#    i <- i + 1
#  }
#  full_data_cells <- Reduce(intersect, cells_list)
# DC_cell <- DC_cell[DC_cell$label %in% full_data_cells, ]
#
#
#  DC_nested_cell <- group_by(data.frame(DC_cell), label) %>% nest()
#
#  dwtest_one_cell <- function(data) {
#    dwtest(residuals ~ 1, data = data)
#  }
#
#  DC_cell <- DC_nested_cell %>%
#    mutate(dwtest = map(data, dwtest_one_cell)) %>%
#    mutate(test_df = map(dwtest, tidy)) %>%
#    unnest(test_df)
#
# # calculate proportion of p values below 5% significance, with Bonferroni correction
#
# DC_percent_auto <- mean(DC_cell$p.value < 0.05/nrow(DC_cell)) * 100
#
# print(DC_percent_auto)
#
# # plot areas with temporal autocorrelation in residuals
# # DC
# DC_temporalAuto <- as.data.frame(DC_cell[, c("label", "p.value")]) %>%
#                       mutate(dwi.autocorr.p.value = p.value)
# samples_tmp <- merge(samples, DC_temporalAuto)
# cell_DC_tempAuto <- samples_tmp %>%
#                       filter(dwi.autocorr.p.value < 0.05)
#
# # DC
# plot_cell_tempAuto(year_oi, cell_DC_tempAuto, "DC")
# print map to show cell_ID, for plotting residual, onset and plant over time
# pal <- colorNumeric(
#   palette = "YlGnBu",
#   domain = cell_DC_tempAuto$dwi.autocorr.p.value
# )
#
# leaflet(cell_DC_tempAuto) %>%
#   addTiles() %>%
#   addPolygons(weight = 0.1,
#     color = ~pal(dwi.autocorr.p.value),
#               popup = cell_DC_tempAuto$cell_ID) %>%
#   addLegend("bottomright",
#             pal = pal,
#             values = ~dwi.autocorr.p.value,
#             title = "dwi.autocorr.p.value",
#             opacity = 1
# )
#
# cell_ID_oi <- "+3895+4563"
#
# specific_cell <- samples %>%
#                     filter(cell_ID == cell_ID_oi)
#
# plot(specific_cell$year, specific_cell$residuals, type = "l", col = "red", lwd = 2.5,
#      ylim = c(-30, 50), ylab = "day", xlab = "year",
#      main = paste("spatial panel for cell", cell_ID_oi))
# lines(specific_cell$year, specific_cell$plant_demeaned, col = "green")
# lines(specific_cell$year, specific_cell$onset_demeaned, col = "blue")
# legend(2004, 50, legend=c("residual", "plant demeaned", "onset demeaned"),
#        col=c("red", "green", "blue"), lty=c(1,1,1))
year_oi <- 2010 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 1 # shift by 0.25 units
lon_offset <- 0
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 2)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2014 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$year, samples_polys$residuals)
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
nb <- poly2nb(samples_polys) #IF SAMPLES IS POLYGON DATA
#nb<-knn2nb(knearneigh(samples_points)) # IF SAMPLES IS POINT DATA
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(samples_polys$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols, all years')
print(moran_basic_ols)
year_oi <- 2010 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 0 # shift by 0.25 units
lon_offset <- 0.5
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 2)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2014 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$year, samples_polys$residuals)
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
nb <- poly2nb(samples_polys) #IF SAMPLES IS POLYGON DATA
#nb<-knn2nb(knearneigh(samples_points)) # IF SAMPLES IS POINT DATA
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(samples_polys$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols, all years')
print(moran_basic_ols)
year_oi <- 2010 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 0 # shift by 0.25 units
lon_offset <- 1
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 2)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2014 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$year, samples_polys$residuals)
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
nb <- poly2nb(samples_polys) #IF SAMPLES IS POLYGON DATA
#nb<-knn2nb(knearneigh(samples_points)) # IF SAMPLES IS POINT DATA
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(samples_polys$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols, all years')
print(moran_basic_ols)
year_oi <- 2010 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- 0.5 # shift by 0.25 units
lon_offset <- 0.5
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 2)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2014 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$year, samples_polys$residuals)
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
nb <- poly2nb(samples_polys) #IF SAMPLES IS POLYGON DATA
#nb<-knn2nb(knearneigh(samples_points)) # IF SAMPLES IS POINT DATA
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(samples_polys$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols, all years')
print(moran_basic_ols)
year_oi <- 2010 # for mapping purposes
# the amount to move the grid left, right, up and down to see impact of different grid locations
lat_offset <- -0.5 # shift by 0.25 units
lon_offset <- -0.5
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
# order cells so the slowest-changing row is cell_ID
cell_sf_tidy <- cell_sf_tidy[order(cell_sf_tidy$cell_ID) , ]
cell_sf_tidy$index <- 1:nrow(cell_sf_tidy) #unique row index to join later
cell_sp_tidy <- as(cell_sf_tidy, 'Spatial')
#samples <- spsample(MT_outline,  type = "random")
#samples <- cell_sf_tidy[seq(1, nrow(cell_sf_tidy), by = 11), ] #spsample(x = cell_sp_tidy, n = 20, type = "regular")
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = 2)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, cell_sp_tidy, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
samples_polys <- merge(data.frame(index = samples[, "index"]), cell_sf_tidy, by.x = "index", by.y = "index")
samples_polys <- st_as_sf(samples_polys)
# samples_points were another way of doing the same thing as samples_polys
samples_points <- st_as_sf(samples, coords = c("lon", "lat"), crs = CRS(proj4string(cell_sp_tidy)))
samples_points <- cbind(samples_points, st_coordinates(samples_points)) %>%
mutate(lon = X) %>%
mutate(lat = Y)
# plot the samples over the full dataset for a given year
full_year <- subset(cell_sf_tidy, year == year_oi)
sample_year <- subset(samples_polys, year == year_oi)
ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled cells, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
year_oi <- 2014 # this is only for visualization
library(leaflet)
cell_sf_tidy <- cell_sf_tidy %>%  drop_na
cell_sf_tidy$year_factor <- as.factor(cell_sf_tidy$year)
model = lm(plant ~ onset + year + lat + intensity, data=samples_polys)
summary(model)
samples_polys$residuals <- residuals(model)
samples_polys$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, samples_polys))
print(plot_cell_plant(year_oi, samples_polys, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(samples_polys$plant, samples_polys$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(samples_polys$fitted.values), col = "blue")
abline(v = mean(samples_polys$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(samples_polys$plant, samples_polys$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, samples_polys, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((samples_polys$plant - mean(samples_polys$plant))^2)
SSE <- sum((samples_polys$residuals - mean(samples_polys$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant and explanatory variables---------------
# print(paste("corr plant-onset", cor(samples_polys$plant, samples_polys$onset)))
# print(paste("corr plant-lat", cor(samples_polys$plant, samples_polys$lat)))
# print(paste("corr plant-year", cor(samples_polys$plant, samples_polys$year)))
# print(paste('sd of fitted. values', sd(samples_polys$fitted.values)))
plot(samples_polys$year, samples_polys$residuals)
abline(h = 0)
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
nb <- poly2nb(samples_polys) #IF SAMPLES IS POLYGON DATA
#nb<-knn2nb(knearneigh(samples_points)) # IF SAMPLES IS POINT DATA
#resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
#plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_basic_ols <- moran.mc(samples_polys$residuals, lw, 999, zero.policy = TRUE)
print('moran with basic ols, all years')
print(moran_basic_ols)
cor(samples_poly$onset)
cor(samples_polys$onset, samples_polys$lat)
cor(samples_polys$onset, samples_polys$year)
