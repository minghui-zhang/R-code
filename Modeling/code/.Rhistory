# Create dataframe with correct rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels), row.names = pid)
#coersion
samplePixels.spdf <- SpatialPolygonsDataFrame(samplePixels, samplePixels.df)
# separate full_data_sp by intensity because can't take mean of intensity. also get rid of cell_ID, year_factor
full_data_sp_DC <- full_data_sp[full_data_sp$intensity == "DC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
full_data_sp_SC <- full_data_sp[full_data_sp$intensity == "SC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
# 'empty' SpatialPolysDataFrame to store per-year info
sampled_data_DC <- full_data_sp_DC[1,]
sampled_data_SC <- full_data_sp_SC[1,]
# aggregate 25km cells to grid cell. do by year and intensity separately
for (year in 2004:2014) {
sampled_year_DC <- aggregate(full_data_sp_DC[full_data_sp_DC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_year_SC <- aggregate(full_data_sp_SC[full_data_sp_SC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_data_DC <- rbind(sampled_data_DC, sampled_year_DC)
sampled_data_SC <- rbind(sampled_data_SC, sampled_year_SC)
}
# get rid of first row
sampled_data_DC <- sampled_data_DC[2:nrow(sampled_data_DC),]
sampled_data_SC <- sampled_data_SC[2:nrow(sampled_data_SC),]
# add intensity, year_factor as a new row
sampled_data_DC$intensity <- rep("DC", nrow(sampled_data_DC))
sampled_data_SC$intensity <- rep("SC", nrow(sampled_data_SC))
sampled_data_DC$year_factor <- as.factor(sampled_data_DC$year)
sampled_data_SC$year_factor <- as.factor(sampled_data_SC$year)
# combine SC and DC
sampled_data <- rbind(sampled_data_DC, sampled_data_SC)
sampled_data <- st_as_sf(sampled_data)
print(paste('num sampled_data', nrow(sampled_data)))
sampled_data <- sampled_data %>% drop_na
print(paste('num sampled_data', nrow(sampled_data)))
sample_year <- subset(sampled_data, year == year_oi)
full_year <- subset(full_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
get_sampled_data <- function(full_data, grid_size, lat_offset, lon_offset, agg_scheme, plot_samples, year_oi) {
# agg_scheme is FALSE for using only individual cells at grid point locations, TRUE for aggregating to grid polygons by mean cell values. plot_samples is TRUE or FALSE, for showing where samples were taken for SC and DC for a given year_oi. year_oi is only for plotting purposes
# order cells so the slowest-changing row is cell_ID
full_data <- full_data[order(full_data$cell_ID) , ]
full_data$index <- 1:nrow(full_data) #unique row index to join later
full_data_sp <- as(full_data, 'Spatial')
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = grid_size)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sampling only the desired
if(!agg_scheme) {
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, full_data_sp, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
sampled_data <- merge(data.frame(index = samples[, "index"]), full_data, by.x = "index", by.y = "index")
sampled_data <- st_as_sf(sampled_data)
}
if(agg_scheme) {
samplePixels <- SpatialPixels(samplePoints[MT_outline,])
samplePixels <- as(samplePixels, "SpatialPolygons")
# turn SpatialPolygon into SpatialPolygonsDataFrame
# Create a dataframe and display default rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels))
rownames(samplePixels.df)
# Extract polygon ID's
pid <- sapply(slot(samplePixels, "polygons"), function(x) slot(x, "ID"))
# Create dataframe with correct rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels), row.names = pid)
#coersion
samplePixels.spdf <- SpatialPolygonsDataFrame(samplePixels, samplePixels.df)
# separate full_data_sp by intensity because can't take mean of intensity. also get rid of cell_ID, year_factor
full_data_sp_DC <- full_data_sp[full_data_sp$intensity == "DC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
full_data_sp_SC <- full_data_sp[full_data_sp$intensity == "SC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
# 'empty' SpatialPolysDataFrame to store per-year info
sampled_data_DC <- full_data_sp_DC[1,]
sampled_data_SC <- full_data_sp_SC[1,]
# aggregate 25km cells to grid cell. do by year and intensity separately
for (year in 2004:2014) {
sampled_year_DC <- aggregate(full_data_sp_DC[full_data_sp_DC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_year_SC <- aggregate(full_data_sp_SC[full_data_sp_SC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_data_DC <- rbind(sampled_data_DC, sampled_year_DC)
sampled_data_SC <- rbind(sampled_data_SC, sampled_year_SC)
}
# get rid of first row
sampled_data_DC <- sampled_data_DC[2:nrow(sampled_data_DC),]
sampled_data_SC <- sampled_data_SC[2:nrow(sampled_data_SC),]
# add intensity, year_factor as a new row
sampled_data_DC$intensity <- rep("DC", nrow(sampled_data_DC))
sampled_data_SC$intensity <- rep("SC", nrow(sampled_data_SC))
sampled_data_DC$year_factor <- as.factor(sampled_data_DC$year)
sampled_data_SC$year_factor <- as.factor(sampled_data_SC$year)
# combine SC and DC
sampled_data <- rbind(sampled_data_DC, sampled_data_SC)
sampled_data <- st_as_sf(sampled_data)
sampled_data <- sampled_data %>% drop_na
}
if (plot_samples & agg_scheme) {
sample_year <- subset(sampled_data, year == year_oi)
full_year <- subset(full_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
if (plot_samples & !agg_scheme) {
# plot the samples over the full dataset for a given year
full_year <- subset(full_data, year == year_oi)
sample_year <- subset(sampled_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled grid, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled grid, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
# output: data.frame to input to models
return(sampled_data)
}
# test output
sampled_data <- get_sampled_data(cell_sf_tidy, grid_size = 1, lat_offset = 0, lon_offset = 0, agg_scheme = TRUE, plot_samples = TRUE, year_oi = 2005)
get_sampled_data <- function(full_data, grid_size, lat_offset, lon_offset, agg_scheme, plot_samples, year_oi) {
# agg_scheme is FALSE for using only individual cells at grid point locations, TRUE for aggregating to grid polygons by mean cell values. plot_samples is TRUE or FALSE, for showing where samples were taken for SC and DC for a given year_oi. year_oi is only for plotting purposes
# order cells so the slowest-changing row is cell_ID
full_data <- full_data[order(full_data$cell_ID) , ]
full_data$index <- 1:nrow(full_data) #unique row index to join later
full_data_sp <- as(full_data, 'Spatial')
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = grid_size)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sampling only the desired
if(!agg_scheme) {
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, full_data_sp, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
sampled_data <- merge(data.frame(index = samples[, "index"]), full_data, by.x = "index", by.y = "index")
sampled_data <- st_as_sf(sampled_data)
}
if(agg_scheme) {
samplePixels <- SpatialPixels(samplePoints[MT_outline,])
samplePixels <- as(samplePixels, "SpatialPolygons")
# turn SpatialPolygon into SpatialPolygonsDataFrame
# Create a dataframe and display default rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels))
rownames(samplePixels.df)
# Extract polygon ID's
pid <- sapply(slot(samplePixels, "polygons"), function(x) slot(x, "ID"))
# Create dataframe with correct rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels), row.names = pid)
#coersion
samplePixels.spdf <- SpatialPolygonsDataFrame(samplePixels, samplePixels.df)
# separate full_data_sp by intensity because can't take mean of intensity. also get rid of cell_ID, year_factor
full_data_sp_DC <- full_data_sp[full_data_sp$intensity == "DC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
full_data_sp_SC <- full_data_sp[full_data_sp$intensity == "SC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
# 'empty' SpatialPolysDataFrame to store per-year info
sampled_data_DC <- full_data_sp_DC[1,]
sampled_data_SC <- full_data_sp_SC[1,]
# aggregate 25km cells to grid cell. do by year and intensity separately
for (year in 2004:2014) {
sampled_year_DC <- aggregate(full_data_sp_DC[full_data_sp_DC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_year_SC <- aggregate(full_data_sp_SC[full_data_sp_SC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_data_DC <- rbind(sampled_data_DC, sampled_year_DC)
sampled_data_SC <- rbind(sampled_data_SC, sampled_year_SC)
}
# get rid of first row
sampled_data_DC <- sampled_data_DC[2:nrow(sampled_data_DC),]
sampled_data_SC <- sampled_data_SC[2:nrow(sampled_data_SC),]
# add intensity, year_factor as a new row
sampled_data_DC$intensity <- rep("DC", nrow(sampled_data_DC))
sampled_data_SC$intensity <- rep("SC", nrow(sampled_data_SC))
sampled_data_DC$year_factor <- as.factor(sampled_data_DC$year)
sampled_data_SC$year_factor <- as.factor(sampled_data_SC$year)
# combine SC and DC
sampled_data <- rbind(sampled_data_DC, sampled_data_SC)
sampled_data <- st_as_sf(sampled_data)
sampled_data <- sampled_data %>% drop_na
}
if (plot_samples & agg_scheme) {
sample_year <- subset(sampled_data, year == year_oi)
full_year <- subset(full_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
if (plot_samples & !agg_scheme) {
# plot the samples over the full dataset for a given year
full_year <- subset(full_data, year == year_oi)
sample_year <- subset(sampled_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled grid, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled grid, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
# output: data.frame to input to models
return(sampled_data)
}
# test output
sampled_data <- get_sampled_data(cell_sf_tidy, grid_size = 1, lat_offset = 0, lon_offset = 0, agg_scheme = FALSE, plot_samples = TRUE, year_oi = 2005)
get_sampled_data <- function(full_data, grid_size, lat_offset, lon_offset, agg_scheme, plot_samples, year_oi) {
# agg_scheme is FALSE for using only individual cells at grid point locations, TRUE for aggregating to grid polygons by mean cell values. plot_samples is TRUE or FALSE, for showing where samples were taken for SC and DC for a given year_oi. year_oi is only for plotting purposes
# order cells so the slowest-changing row is cell_ID
full_data <- full_data[order(full_data$cell_ID) , ]
full_data$index <- 1:nrow(full_data) #unique row index to join later
full_data_sp <- as(full_data, 'Spatial')
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = grid_size)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sampling only the desired
if(!agg_scheme) {
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, full_data_sp, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
sampled_data <- merge(data.frame(index = samples[, "index"]), full_data, by.x = "index", by.y = "index")
sampled_data <- st_as_sf(sampled_data)
}
if(agg_scheme) {
samplePixels <- SpatialPixels(samplePoints[MT_outline,])
samplePixels <- as(samplePixels, "SpatialPolygons")
# turn SpatialPolygon into SpatialPolygonsDataFrame
# Create a dataframe and display default rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels))
rownames(samplePixels.df)
# Extract polygon ID's
pid <- sapply(slot(samplePixels, "polygons"), function(x) slot(x, "ID"))
# Create dataframe with correct rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels), row.names = pid)
#coersion
samplePixels.spdf <- SpatialPolygonsDataFrame(samplePixels, samplePixels.df)
# separate full_data_sp by intensity because can't take mean of intensity. also get rid of cell_ID, year_factor
full_data_sp_DC <- full_data_sp[full_data_sp$intensity == "DC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
full_data_sp_SC <- full_data_sp[full_data_sp$intensity == "SC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
# 'empty' SpatialPolysDataFrame to store per-year info
sampled_data_DC <- full_data_sp_DC[1,]
sampled_data_SC <- full_data_sp_SC[1,]
# aggregate 25km cells to grid cell. do by year and intensity separately
for (year in 2004:2014) {
sampled_year_DC <- aggregate(full_data_sp_DC[full_data_sp_DC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_year_SC <- aggregate(full_data_sp_SC[full_data_sp_SC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_data_DC <- rbind(sampled_data_DC, sampled_year_DC)
sampled_data_SC <- rbind(sampled_data_SC, sampled_year_SC)
}
# get rid of first row
sampled_data_DC <- sampled_data_DC[2:nrow(sampled_data_DC),]
sampled_data_SC <- sampled_data_SC[2:nrow(sampled_data_SC),]
# add intensity, year_factor as a new row
sampled_data_DC$intensity <- rep("DC", nrow(sampled_data_DC))
sampled_data_SC$intensity <- rep("SC", nrow(sampled_data_SC))
sampled_data_DC$year_factor <- as.factor(sampled_data_DC$year)
sampled_data_SC$year_factor <- as.factor(sampled_data_SC$year)
# combine SC and DC
sampled_data <- rbind(sampled_data_DC, sampled_data_SC)
sampled_data <- st_as_sf(sampled_data)
sampled_data <- sampled_data %>% drop_na
}
if (plot_samples & agg_scheme) {
sample_year <- subset(sampled_data, year == year_oi)
full_year <- subset(full_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
if (plot_samples & !agg_scheme) {
# plot the samples over the full dataset for a given year
full_year <- subset(full_data, year == year_oi)
sample_year <- subset(sampled_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled grid, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled grid, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
# output: data.frame to input to models
return(sampled_data)
}
# test output
sampled_data <- get_sampled_data(cell_sf_tidy, grid_size = 1, lat_offset = 0.5, lon_offset = 0.5, agg_scheme = FALSE, plot_samples = TRUE, year_oi = 2005)
get_sampled_data <- function(full_data, grid_size, lat_offset, lon_offset, agg_scheme, plot_samples, year_oi) {
# agg_scheme is FALSE for using only individual cells at grid point locations, TRUE for aggregating to grid polygons by mean cell values. plot_samples is TRUE or FALSE, for showing where samples were taken for SC and DC for a given year_oi. year_oi is only for plotting purposes
# order cells so the slowest-changing row is cell_ID
full_data <- full_data[order(full_data$cell_ID) , ]
full_data$index <- 1:nrow(full_data) #unique row index to join later
full_data_sp <- as(full_data, 'Spatial')
# generate regular grid of points
samplePoints <- makegrid(MT_outline, cellsize = grid_size)
samplePoints$x1 <- samplePoints$x1 + lon_offset
samplePoints$x2 <- samplePoints$x2 + lat_offset
samplePoints <- SpatialPoints(samplePoints, proj4string = CRS(proj4string(MT_outline)))
# sampling only the desired
if(!agg_scheme) {
# sample from grid of points, delete NA's
samples <- sp::over(samplePoints, full_data_sp, returnList = TRUE) %>%
bind_rows()
samples <- samples[complete.cases(samples),] # data.frame
sampled_data <- merge(data.frame(index = samples[, "index"]), full_data, by.x = "index", by.y = "index")
sampled_data <- st_as_sf(sampled_data)
}
if(agg_scheme) {
samplePixels <- SpatialPixels(samplePoints[MT_outline,])
samplePixels <- as(samplePixels, "SpatialPolygons")
# turn SpatialPolygon into SpatialPolygonsDataFrame
# Create a dataframe and display default rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels))
rownames(samplePixels.df)
# Extract polygon ID's
pid <- sapply(slot(samplePixels, "polygons"), function(x) slot(x, "ID"))
# Create dataframe with correct rownames
samplePixels.df <- data.frame( ID=1:length(samplePixels), row.names = pid)
#coersion
samplePixels.spdf <- SpatialPolygonsDataFrame(samplePixels, samplePixels.df)
# separate full_data_sp by intensity because can't take mean of intensity. also get rid of cell_ID, year_factor
full_data_sp_DC <- full_data_sp[full_data_sp$intensity == "DC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
full_data_sp_SC <- full_data_sp[full_data_sp$intensity == "SC",
!(names(full_data_sp) %in% c("cell_ID", "intensity", "year_factor"))]
# 'empty' SpatialPolysDataFrame to store per-year info
sampled_data_DC <- full_data_sp_DC[1,]
sampled_data_SC <- full_data_sp_SC[1,]
# aggregate 25km cells to grid cell. do by year and intensity separately
for (year in 2004:2014) {
sampled_year_DC <- aggregate(full_data_sp_DC[full_data_sp_DC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_year_SC <- aggregate(full_data_sp_SC[full_data_sp_SC$year == year,], by = samplePixels.spdf, FUN = mean)
sampled_data_DC <- rbind(sampled_data_DC, sampled_year_DC)
sampled_data_SC <- rbind(sampled_data_SC, sampled_year_SC)
}
# get rid of first row
sampled_data_DC <- sampled_data_DC[2:nrow(sampled_data_DC),]
sampled_data_SC <- sampled_data_SC[2:nrow(sampled_data_SC),]
# add intensity, year_factor as a new row
sampled_data_DC$intensity <- rep("DC", nrow(sampled_data_DC))
sampled_data_SC$intensity <- rep("SC", nrow(sampled_data_SC))
sampled_data_DC$year_factor <- as.factor(sampled_data_DC$year)
sampled_data_SC$year_factor <- as.factor(sampled_data_SC$year)
# combine SC and DC
sampled_data <- rbind(sampled_data_DC, sampled_data_SC)
sampled_data <- st_as_sf(sampled_data)
sampled_data <- sampled_data %>% drop_na
}
if (plot_samples & agg_scheme) {
sample_year <- subset(sampled_data, year == year_oi)
full_year <- subset(full_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue", alpha = 0) +
ggtitle(paste("Sampled cells, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
if (plot_samples & !agg_scheme) {
# plot the samples over the full dataset for a given year
full_year <- subset(full_data, year == year_oi)
sample_year <- subset(sampled_data, year == year_oi)
DC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "DC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "DC"), color = "blue") +
ggtitle(paste("Sampled grid, for DC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
SC_sampled_map <- ggplot() +
geom_sf(data = subset(full_year, intensity == "SC"), color = "gray") +
geom_sf(data = subset(sample_year, intensity == "SC"), color = "blue") +
ggtitle(paste("Sampled grid, for SC", year_oi)) +
geom_polygon(data = MT_outline, aes(x = long, y = lat), color = "black", alpha = 0, linetype = 1) +
theme_bw()
print(DC_sampled_map)
print(SC_sampled_map)
}
# output: data.frame to input to models
return(sampled_data)
}
# test output
sampled_data <- get_sampled_data(cell_sf_tidy, grid_size = 1, lat_offset = 0.5, lon_offset = 0.5, agg_scheme = TRUE, plot_samples = TRUE, year_oi = 2005)
year_oi <- 2008 # this is only for visualization
model = lm(plant ~ onset + year + lat + intensity, data=sampled_data)
summary(model)
sampled_data$residuals <- residuals(model)
sampled_data$fitted.values <- fitted.values(model)
# model evaluation: plant and onset maps (only those used in the actual modeling) --------------------------------------
print(plot_cell_onset(year_oi, sampled_data))
print(plot_cell_plant(year_oi, sampled_data, "DC"))
# model evaluation: residual vs fitted value and vs index, and residual qq plot ----------------------------------------
test_plots(model, "spatial sampled, regular OLS")
plot(sampled_data$plant, sampled_data$fitted.values, main = "sampled OLS fitted value vs actual value of plant", ylab = "fitted.values")
abline(h = mean(sampled_data$fitted.values), col = "blue")
abline(v = mean(sampled_data$plant), col = "blue")
abline(0,1, col = "gray", lwd = 3)
plot(sampled_data$plant, sampled_data$residuals, main = "plant vs residuals")
# model evaluation: residual map ---------------------------------------------------------------------------------------
print(plot_cell_residuals(year_oi, sampled_data, "DC"))
# model evaluation: calculate R2 ---------------------------------------------------------------------------------------
SST <- sum((sampled_data$plant - mean(sampled_data$plant))^2)
SSE <- sum((sampled_data$residuals - mean(sampled_data$residuals))^2)
R2 <- 1 - SSE/SST
print(paste('R2:', R2))
# model evaluation: correlations between plant/onset and explanatory variables---------------
# print(paste("corr plant-onset", cor(sampled_data$plant, sampled_data$onset)))
# print(paste("corr plant-lat", cor(sampled_data$plant, sampled_data$lat)))
# print(paste("corr plant-year", cor(sampled_data$plant, sampled_data$year)))
# print(paste('sd of fitted. values', sd(sampled_data$fitted.values)))
plot(sampled_data$onset, sampled_data$residuals, main = "spatial sample, onset vs residual (exogeneity)")
plot(sampled_data$lat, sampled_data$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
plot(sampled_data$year, sampled_data$residuals, main = "spatial sample, latitude vs residual (exogeneity)")
abline(h = 0)
# multicollinearity: correlation between predictors
predictors <- sampled_data[,c("lat", "onset", "year")]
st_geometry(predictors) <- NULL
print(cor(predictors))
# model evaluation: see if basic OLS residuals are spatially autocorrelated with scatterplot -------------------------
# need 'one layer': one year, one intensity
to_autocorrelation <- sampled_data[sampled_data$year == year_oi & sampled_data$intensity == "DC", ]
to_autocorrelation_sp <- as(to_autocorrelation, "Spatial")
st_geometry(to_autocorrelation) <- NULL # turn to_autocorrelation into data frame
centroids <- coordinates(to_autocorrelation_sp)
to_autocorrelation_points <- SpatialPointsDataFrame(coords = centroids, data = to_autocorrelation)
# nb <- poly2nb(to_autocorrelation) #IF SAMPLES IS POLYGON DATA
nb<-knn2nb(knearneigh(to_autocorrelation_points)) # IF SAMPLES IS POINT DATA
# #resnb <- sapply(nb, function(x) mean(cell_sf_tidy$residuals[x]))
# #plot(cell_sf_tidy$residuals, resnb, xlab='Residuals', ylab='Mean adjacent residuals', main = "Basic OLS, all years")
lw <- nb2listw(nb, zero.policy = TRUE)
moran_residual <- moran.mc(to_autocorrelation_points$residuals, lw, 999, zero.policy = TRUE)
print('moran I for residuals')
print(moran_residual)
moran_onset <- moran.mc(to_autocorrelation_points$onset, lw, 999, zero.policy = TRUE)
print('moran I of onset with basic ols')
print(moran_onset)
moran_plant <- moran.mc(to_autocorrelation_points$plant, lw, 999, zero.policy = TRUE)
print('moran I of plant')
print(moran_plant)
# percent of total data that's used in regression
print(paste('percent total data used:', 100*nrow(sampled_data)/nrow(cell_sf_tidy)))
